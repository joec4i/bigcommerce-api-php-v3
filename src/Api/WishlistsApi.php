<?php
/**
 * WishlistsApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\V3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wishlist API
 *
 * The Wishlist API allows a developer to create and manage customer Wishlists.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\V3\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BigCommerce\Api\V3\ApiException;
use BigCommerce\Api\V3\Configuration;
use BigCommerce\Api\V3\HeaderSelector;
use BigCommerce\Api\V3\ObjectSerializer;

/**
 * WishlistsApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\V3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WishlistsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addWishlistItems
     *
     * Add Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistAddItemsRequest $body body (optional)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse
     */
    public function addWishlistItems($wishlist_id, $body = null)
    {
        list($response) = $this->addWishlistItemsWithHttpInfo($wishlist_id, $body);
        return $response;
    }

    /**
     * Operation addWishlistItemsWithHttpInfo
     *
     * Add Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistAddItemsRequest $body (optional)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function addWishlistItemsWithHttpInfo($wishlist_id, $body = null)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->addWishlistItemsRequest($wishlist_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addWishlistItemsAsync
     *
     * Add Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistAddItemsRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWishlistItemsAsync($wishlist_id, $body = null)
    {
        return $this->addWishlistItemsAsyncWithHttpInfo($wishlist_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addWishlistItemsAsyncWithHttpInfo
     *
     * Add Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistAddItemsRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addWishlistItemsAsyncWithHttpInfo($wishlist_id, $body = null)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->addWishlistItemsRequest($wishlist_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addWishlistItems'
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistAddItemsRequest $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addWishlistItemsRequest($wishlist_id, $body = null)
    {
        // verify the required parameter 'wishlist_id' is set
        if ($wishlist_id === null || (is_array($wishlist_id) && count($wishlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_id when calling addWishlistItems'
            );
        }

        $resourcePath = '/wishlists/{wishlist_id}/items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($wishlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wishlist_id' . '}',
                ObjectSerializer::toPathValue($wishlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createWishlist
     *
     * Create a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse
     */
    public function createWishlist($body)
    {
        list($response) = $this->createWishlistWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createWishlistWithHttpInfo
     *
     * Create a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createWishlistWithHttpInfo($body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->createWishlistRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createWishlistAsync
     *
     * Create a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWishlistAsync($body)
    {
        return $this->createWishlistAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createWishlistAsyncWithHttpInfo
     *
     * Create a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createWishlistAsyncWithHttpInfo($body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->createWishlistRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createWishlist'
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createWishlistRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createWishlist'
            );
        }

        $resourcePath = '/wishlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWishlist
     *
     * Delete a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWishlist($wishlist_id)
    {
        $this->deleteWishlistWithHttpInfo($wishlist_id);
    }

    /**
     * Operation deleteWishlistWithHttpInfo
     *
     * Delete a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWishlistWithHttpInfo($wishlist_id)
    {
        $returnType = '';
        $request = $this->deleteWishlistRequest($wishlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWishlistAsync
     *
     * Delete a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWishlistAsync($wishlist_id)
    {
        return $this->deleteWishlistAsyncWithHttpInfo($wishlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWishlistAsyncWithHttpInfo
     *
     * Delete a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWishlistAsyncWithHttpInfo($wishlist_id)
    {
        $returnType = '';
        $request = $this->deleteWishlistRequest($wishlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWishlist'
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWishlistRequest($wishlist_id)
    {
        // verify the required parameter 'wishlist_id' is set
        if ($wishlist_id === null || (is_array($wishlist_id) && count($wishlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_id when calling deleteWishlist'
            );
        }

        $resourcePath = '/wishlists/{wishlist_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($wishlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wishlist_id' . '}',
                ObjectSerializer::toPathValue($wishlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteWishlistItem
     *
     * Delete Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  int $item_id item_id (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteWishlistItem($wishlist_id, $item_id)
    {
        $this->deleteWishlistItemWithHttpInfo($wishlist_id, $item_id);
    }

    /**
     * Operation deleteWishlistItemWithHttpInfo
     *
     * Delete Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  int $item_id (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteWishlistItemWithHttpInfo($wishlist_id, $item_id)
    {
        $returnType = '';
        $request = $this->deleteWishlistItemRequest($wishlist_id, $item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteWishlistItemAsync
     *
     * Delete Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  int $item_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWishlistItemAsync($wishlist_id, $item_id)
    {
        return $this->deleteWishlistItemAsyncWithHttpInfo($wishlist_id, $item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteWishlistItemAsyncWithHttpInfo
     *
     * Delete Wishlist Item
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  int $item_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteWishlistItemAsyncWithHttpInfo($wishlist_id, $item_id)
    {
        $returnType = '';
        $request = $this->deleteWishlistItemRequest($wishlist_id, $item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteWishlistItem'
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     * @param  int $item_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteWishlistItemRequest($wishlist_id, $item_id)
    {
        // verify the required parameter 'wishlist_id' is set
        if ($wishlist_id === null || (is_array($wishlist_id) && count($wishlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_id when calling deleteWishlistItem'
            );
        }
        // verify the required parameter 'item_id' is set
        if ($item_id === null || (is_array($item_id) && count($item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $item_id when calling deleteWishlistItem'
            );
        }

        $resourcePath = '/wishlists/{wishlist_id}/items/{item_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($wishlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wishlist_id' . '}',
                ObjectSerializer::toPathValue($wishlist_id),
                $resourcePath
            );
        }
        // path params
        if ($item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'item_id' . '}',
                ObjectSerializer::toPathValue($item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getWishlist
     *
     * Get a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse
     */
    public function getWishlist($wishlist_id)
    {
        list($response) = $this->getWishlistWithHttpInfo($wishlist_id);
        return $response;
    }

    /**
     * Operation getWishlistWithHttpInfo
     *
     * Get a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getWishlistWithHttpInfo($wishlist_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->getWishlistRequest($wishlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getWishlistAsync
     *
     * Get a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWishlistAsync($wishlist_id)
    {
        return $this->getWishlistAsyncWithHttpInfo($wishlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getWishlistAsyncWithHttpInfo
     *
     * Get a Wishlist
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getWishlistAsyncWithHttpInfo($wishlist_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->getWishlistRequest($wishlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getWishlist'
     *
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getWishlistRequest($wishlist_id)
    {
        // verify the required parameter 'wishlist_id' is set
        if ($wishlist_id === null || (is_array($wishlist_id) && count($wishlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_id when calling getWishlist'
            );
        }

        $resourcePath = '/wishlists/{wishlist_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($wishlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wishlist_id' . '}',
                ObjectSerializer::toPathValue($wishlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listWishlists
     *
     * Get Wishlists
     *
     * @param  int $customer_id All wishlists relating to the customer. (optional)
     * @param  int $page The page number of results per page. 1 is the default and starts from record 0. (optional)
     * @param  int $limit The numbers of items to return per page. Default is 50 and maximum is 250. (optional)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Wishlist\WishlistCollectionResponse
     */
    public function listWishlists($customer_id = null, $page = null, $limit = null)
    {
        list($response) = $this->listWishlistsWithHttpInfo($customer_id, $page, $limit);
        return $response;
    }

    /**
     * Operation listWishlistsWithHttpInfo
     *
     * Get Wishlists
     *
     * @param  int $customer_id All wishlists relating to the customer. (optional)
     * @param  int $page The page number of results per page. 1 is the default and starts from record 0. (optional)
     * @param  int $limit The numbers of items to return per page. Default is 50 and maximum is 250. (optional)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Wishlist\WishlistCollectionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listWishlistsWithHttpInfo($customer_id = null, $page = null, $limit = null)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistCollectionResponse';
        $request = $this->listWishlistsRequest($customer_id, $page, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Wishlist\WishlistCollectionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listWishlistsAsync
     *
     * Get Wishlists
     *
     * @param  int $customer_id All wishlists relating to the customer. (optional)
     * @param  int $page The page number of results per page. 1 is the default and starts from record 0. (optional)
     * @param  int $limit The numbers of items to return per page. Default is 50 and maximum is 250. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWishlistsAsync($customer_id = null, $page = null, $limit = null)
    {
        return $this->listWishlistsAsyncWithHttpInfo($customer_id, $page, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listWishlistsAsyncWithHttpInfo
     *
     * Get Wishlists
     *
     * @param  int $customer_id All wishlists relating to the customer. (optional)
     * @param  int $page The page number of results per page. 1 is the default and starts from record 0. (optional)
     * @param  int $limit The numbers of items to return per page. Default is 50 and maximum is 250. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listWishlistsAsyncWithHttpInfo($customer_id = null, $page = null, $limit = null)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistCollectionResponse';
        $request = $this->listWishlistsRequest($customer_id, $page, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listWishlists'
     *
     * @param  int $customer_id All wishlists relating to the customer. (optional)
     * @param  int $page The page number of results per page. 1 is the default and starts from record 0. (optional)
     * @param  int $limit The numbers of items to return per page. Default is 50 and maximum is 250. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listWishlistsRequest($customer_id = null, $page = null, $limit = null)
    {

        $resourcePath = '/wishlists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($customer_id !== null) {
            $queryParams['customer_id'] = ObjectSerializer::toQueryValue($customer_id);
        }
        // query params
        if ($page !== null) {
            $queryParams['page'] = ObjectSerializer::toQueryValue($page);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateWishlist
     *
     * Update a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse
     */
    public function updateWishlist($body, $wishlist_id)
    {
        list($response) = $this->updateWishlistWithHttpInfo($body, $wishlist_id);
        return $response;
    }

    /**
     * Operation updateWishlistWithHttpInfo
     *
     * Update a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Wishlist\WishlistResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateWishlistWithHttpInfo($body, $wishlist_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->updateWishlistRequest($body, $wishlist_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateWishlistAsync
     *
     * Update a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWishlistAsync($body, $wishlist_id)
    {
        return $this->updateWishlistAsyncWithHttpInfo($body, $wishlist_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateWishlistAsyncWithHttpInfo
     *
     * Update a Wishlist
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateWishlistAsyncWithHttpInfo($body, $wishlist_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Wishlist\WishlistResponse';
        $request = $this->updateWishlistRequest($body, $wishlist_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateWishlist'
     *
     * @param  \BigCommerce\Api\V3\Model\Wishlist\WishlistRequest $body  (required)
     * @param  int $wishlist_id ID of the Wishlist (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateWishlistRequest($body, $wishlist_id)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateWishlist'
            );
        }
        // verify the required parameter 'wishlist_id' is set
        if ($wishlist_id === null || (is_array($wishlist_id) && count($wishlist_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $wishlist_id when calling updateWishlist'
            );
        }

        $resourcePath = '/wishlists/{wishlist_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($wishlist_id !== null) {
            $resourcePath = str_replace(
                '{' . 'wishlist_id' . '}',
                ObjectSerializer::toPathValue($wishlist_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
