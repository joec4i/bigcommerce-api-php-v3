<?php
/**
 * CheckoutApi
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\V3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server to Server Checkout API
 *
 * ### Checkout Allows for a checkout to be created from an existing cart using BigCommerce checkout logic. The existing BigCommerce front end cart/checkout can be bypassed.  Notes: - checkoutId is the same as the cartId.
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\V3\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BigCommerce\Api\V3\ApiException;
use BigCommerce\Api\V3\Configuration;
use BigCommerce\Api\V3\HeaderSelector;
use BigCommerce\Api\V3\ObjectSerializer;

/**
 * CheckoutApi Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\V3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdAndAddressIdPut
     *
     * Update Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  int $address_id address_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties1 $body  (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsBillingAddressByCheckoutIdAndAddressIdPut($checkout_id, $accept, $content_type, $address_id, $body)
    {
        list($response) = $this->checkoutsBillingAddressByCheckoutIdAndAddressIdPutWithHttpInfo($checkout_id, $accept, $content_type, $address_id, $body);
        return $response;
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdAndAddressIdPutWithHttpInfo
     *
     * Update Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  int $address_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties1 $body  (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsBillingAddressByCheckoutIdAndAddressIdPutWithHttpInfo($checkout_id, $accept, $content_type, $address_id, $body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsBillingAddressByCheckoutIdAndAddressIdPutRequest($checkout_id, $accept, $content_type, $address_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdAndAddressIdPutAsync
     *
     * Update Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  int $address_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties1 $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsBillingAddressByCheckoutIdAndAddressIdPutAsync($checkout_id, $accept, $content_type, $address_id, $body)
    {
        return $this->checkoutsBillingAddressByCheckoutIdAndAddressIdPutAsyncWithHttpInfo($checkout_id, $accept, $content_type, $address_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdAndAddressIdPutAsyncWithHttpInfo
     *
     * Update Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  int $address_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties1 $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsBillingAddressByCheckoutIdAndAddressIdPutAsyncWithHttpInfo($checkout_id, $accept, $content_type, $address_id, $body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsBillingAddressByCheckoutIdAndAddressIdPutRequest($checkout_id, $accept, $content_type, $address_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsBillingAddressByCheckoutIdAndAddressIdPut'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  int $address_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties1 $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsBillingAddressByCheckoutIdAndAddressIdPutRequest($checkout_id, $accept, $content_type, $address_id, $body)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut'
            );
        }
        // verify the required parameter 'address_id' is set
        if ($address_id === null || (is_array($address_id) && count($address_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $address_id when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling checkoutsBillingAddressByCheckoutIdAndAddressIdPut'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/billing-address/{addressId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }
        // path params
        if ($address_id !== null) {
            $resourcePath = str_replace(
                '{' . 'addressId' . '}',
                ObjectSerializer::toPathValue($address_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdPost
     *
     * Add Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties $body Either email or countryCode is required. (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsBillingAddressByCheckoutIdPost($checkout_id, $accept, $content_type, $body)
    {
        list($response) = $this->checkoutsBillingAddressByCheckoutIdPostWithHttpInfo($checkout_id, $accept, $content_type, $body);
        return $response;
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdPostWithHttpInfo
     *
     * Add Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties $body Either email or countryCode is required. (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsBillingAddressByCheckoutIdPostWithHttpInfo($checkout_id, $accept, $content_type, $body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsBillingAddressByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdPostAsync
     *
     * Add Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties $body Either email or countryCode is required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsBillingAddressByCheckoutIdPostAsync($checkout_id, $accept, $content_type, $body)
    {
        return $this->checkoutsBillingAddressByCheckoutIdPostAsyncWithHttpInfo($checkout_id, $accept, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsBillingAddressByCheckoutIdPostAsyncWithHttpInfo
     *
     * Add Checkout Billing Address
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties $body Either email or countryCode is required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsBillingAddressByCheckoutIdPostAsyncWithHttpInfo($checkout_id, $accept, $content_type, $body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsBillingAddressByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsBillingAddressByCheckoutIdPost'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\AddressProperties $body Either email or countryCode is required. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsBillingAddressByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsBillingAddressByCheckoutIdPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsBillingAddressByCheckoutIdPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsBillingAddressByCheckoutIdPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling checkoutsBillingAddressByCheckoutIdPost'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/billing-address';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsByCheckoutIdGet
     *
     * Get a Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsByCheckoutIdGet($checkout_id, $accept, $content_type)
    {
        list($response) = $this->checkoutsByCheckoutIdGetWithHttpInfo($checkout_id, $accept, $content_type);
        return $response;
    }

    /**
     * Operation checkoutsByCheckoutIdGetWithHttpInfo
     *
     * Get a Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsByCheckoutIdGetWithHttpInfo($checkout_id, $accept, $content_type)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsByCheckoutIdGetRequest($checkout_id, $accept, $content_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\CheckoutError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsByCheckoutIdGetAsync
     *
     * Get a Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsByCheckoutIdGetAsync($checkout_id, $accept, $content_type)
    {
        return $this->checkoutsByCheckoutIdGetAsyncWithHttpInfo($checkout_id, $accept, $content_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsByCheckoutIdGetAsyncWithHttpInfo
     *
     * Get a Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsByCheckoutIdGetAsyncWithHttpInfo($checkout_id, $accept, $content_type)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsByCheckoutIdGetRequest($checkout_id, $accept, $content_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsByCheckoutIdGet'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsByCheckoutIdGetRequest($checkout_id, $accept, $content_type)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsByCheckoutIdGet'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsByCheckoutIdGet'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsByCheckoutIdGet'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete
     *
     * Delete Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $consignment_id consignment_id (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete($checkout_id, $accept, $content_type, $consignment_id)
    {
        list($response) = $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id);
        return $response;
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteWithHttpInfo
     *
     * Delete Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest($checkout_id, $accept, $content_type, $consignment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteAsync
     *
     * Delete Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteAsync($checkout_id, $accept, $content_type, $consignment_id)
    {
        return $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteAsyncWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteAsyncWithHttpInfo
     *
     * Delete Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteAsyncWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest($checkout_id, $accept, $content_type, $consignment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsConsignmentsByCheckoutIdAndConsignmentIdDeleteRequest($checkout_id, $accept, $content_type, $consignment_id)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'
            );
        }
        // verify the required parameter 'consignment_id' is set
        if ($consignment_id === null || (is_array($consignment_id) && count($consignment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_id when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdDelete'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/consignments/{consignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }
        // path params
        if ($consignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consignmentId' . '}',
                ObjectSerializer::toPathValue($consignment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut
     *
     * Update Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $consignment_id consignment_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\UpdateConsignmentRequest $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut($checkout_id, $accept, $content_type, $consignment_id, $body, $include = 'consignments.available_shipping_options')
    {
        list($response) = $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id, $body, $include);
        return $response;
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutWithHttpInfo
     *
     * Update Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\UpdateConsignmentRequest $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id, $body, $include = 'consignments.available_shipping_options')
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest($checkout_id, $accept, $content_type, $consignment_id, $body, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutAsync
     *
     * Update Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\UpdateConsignmentRequest $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutAsync($checkout_id, $accept, $content_type, $consignment_id, $body, $include = 'consignments.available_shipping_options')
    {
        return $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutAsyncWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id, $body, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutAsyncWithHttpInfo
     *
     * Update Checkout Consignment
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\UpdateConsignmentRequest $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutAsyncWithHttpInfo($checkout_id, $accept, $content_type, $consignment_id, $body, $include = 'consignments.available_shipping_options')
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest($checkout_id, $accept, $content_type, $consignment_id, $body, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $consignment_id (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\UpdateConsignmentRequest $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsConsignmentsByCheckoutIdAndConsignmentIdPutRequest($checkout_id, $accept, $content_type, $consignment_id, $body, $include = 'consignments.available_shipping_options')
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut'
            );
        }
        // verify the required parameter 'consignment_id' is set
        if ($consignment_id === null || (is_array($consignment_id) && count($consignment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consignment_id when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling checkoutsConsignmentsByCheckoutIdAndConsignmentIdPut'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/consignments/{consignmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }
        // path params
        if ($consignment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consignmentId' . '}',
                ObjectSerializer::toPathValue($consignment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdPost
     *
     * Add Consignment to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CreateConsignmentRequest[] $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsConsignmentsByCheckoutIdPost($checkout_id, $accept, $content_type, $body, $include = 'consignments.available_shipping_options')
    {
        list($response) = $this->checkoutsConsignmentsByCheckoutIdPostWithHttpInfo($checkout_id, $accept, $content_type, $body, $include);
        return $response;
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdPostWithHttpInfo
     *
     * Add Consignment to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CreateConsignmentRequest[] $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsConsignmentsByCheckoutIdPostWithHttpInfo($checkout_id, $accept, $content_type, $body, $include = 'consignments.available_shipping_options')
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsConsignmentsByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body, $include);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdPostAsync
     *
     * Add Consignment to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CreateConsignmentRequest[] $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsConsignmentsByCheckoutIdPostAsync($checkout_id, $accept, $content_type, $body, $include = 'consignments.available_shipping_options')
    {
        return $this->checkoutsConsignmentsByCheckoutIdPostAsyncWithHttpInfo($checkout_id, $accept, $content_type, $body, $include)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsConsignmentsByCheckoutIdPostAsyncWithHttpInfo
     *
     * Add Consignment to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CreateConsignmentRequest[] $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsConsignmentsByCheckoutIdPostAsyncWithHttpInfo($checkout_id, $accept, $content_type, $body, $include = 'consignments.available_shipping_options')
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsConsignmentsByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body, $include);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsConsignmentsByCheckoutIdPost'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CreateConsignmentRequest[] $body  (required)
     * @param  string $include Must be included to get available shipping options (optional, default to consignments.available_shipping_options)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsConsignmentsByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body, $include = 'consignments.available_shipping_options')
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsConsignmentsByCheckoutIdPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsConsignmentsByCheckoutIdPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsConsignmentsByCheckoutIdPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling checkoutsConsignmentsByCheckoutIdPost'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/consignments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include !== null) {
            $queryParams['include'] = ObjectSerializer::toQueryValue($include);
        }
        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdAndCouponCodeDelete
     *
     * Delete Checkout Coupon
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $coupon_code The actual couponCode, not the couponId. (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsCouponsByCheckoutIdAndCouponCodeDelete($checkout_id, $accept, $content_type, $coupon_code)
    {
        list($response) = $this->checkoutsCouponsByCheckoutIdAndCouponCodeDeleteWithHttpInfo($checkout_id, $accept, $content_type, $coupon_code);
        return $response;
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdAndCouponCodeDeleteWithHttpInfo
     *
     * Delete Checkout Coupon
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $coupon_code The actual couponCode, not the couponId. (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsCouponsByCheckoutIdAndCouponCodeDeleteWithHttpInfo($checkout_id, $accept, $content_type, $coupon_code)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsCouponsByCheckoutIdAndCouponCodeDeleteRequest($checkout_id, $accept, $content_type, $coupon_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdAndCouponCodeDeleteAsync
     *
     * Delete Checkout Coupon
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $coupon_code The actual couponCode, not the couponId. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsCouponsByCheckoutIdAndCouponCodeDeleteAsync($checkout_id, $accept, $content_type, $coupon_code)
    {
        return $this->checkoutsCouponsByCheckoutIdAndCouponCodeDeleteAsyncWithHttpInfo($checkout_id, $accept, $content_type, $coupon_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdAndCouponCodeDeleteAsyncWithHttpInfo
     *
     * Delete Checkout Coupon
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $coupon_code The actual couponCode, not the couponId. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsCouponsByCheckoutIdAndCouponCodeDeleteAsyncWithHttpInfo($checkout_id, $accept, $content_type, $coupon_code)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsCouponsByCheckoutIdAndCouponCodeDeleteRequest($checkout_id, $accept, $content_type, $coupon_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsCouponsByCheckoutIdAndCouponCodeDelete'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $coupon_code The actual couponCode, not the couponId. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsCouponsByCheckoutIdAndCouponCodeDeleteRequest($checkout_id, $accept, $content_type, $coupon_code)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsCouponsByCheckoutIdAndCouponCodeDelete'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsCouponsByCheckoutIdAndCouponCodeDelete'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsCouponsByCheckoutIdAndCouponCodeDelete'
            );
        }
        // verify the required parameter 'coupon_code' is set
        if ($coupon_code === null || (is_array($coupon_code) && count($coupon_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $coupon_code when calling checkoutsCouponsByCheckoutIdAndCouponCodeDelete'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/coupons/{couponCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }
        // path params
        if ($coupon_code !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCode' . '}',
                ObjectSerializer::toPathValue($coupon_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdPost
     *
     * Add Coupon to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CouponCodeRequest $body  (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Checkout1
     */
    public function checkoutsCouponsByCheckoutIdPost($checkout_id, $accept, $content_type, $body)
    {
        list($response) = $this->checkoutsCouponsByCheckoutIdPostWithHttpInfo($checkout_id, $accept, $content_type, $body);
        return $response;
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdPostWithHttpInfo
     *
     * Add Coupon to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CouponCodeRequest $body  (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Checkout1, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkoutsCouponsByCheckoutIdPostWithHttpInfo($checkout_id, $accept, $content_type, $body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsCouponsByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Checkout1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdPostAsync
     *
     * Add Coupon to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CouponCodeRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsCouponsByCheckoutIdPostAsync($checkout_id, $accept, $content_type, $body)
    {
        return $this->checkoutsCouponsByCheckoutIdPostAsyncWithHttpInfo($checkout_id, $accept, $content_type, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkoutsCouponsByCheckoutIdPostAsyncWithHttpInfo
     *
     * Add Coupon to Checkout
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CouponCodeRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkoutsCouponsByCheckoutIdPostAsyncWithHttpInfo($checkout_id, $accept, $content_type, $body)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Checkout1';
        $request = $this->checkoutsCouponsByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkoutsCouponsByCheckoutIdPost'
     *
     * @param  string $checkout_id Id of the Checkout (required)
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  \BigCommerce\Api\V3\Model\Checkout\CouponCodeRequest $body  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkoutsCouponsByCheckoutIdPostRequest($checkout_id, $accept, $content_type, $body)
    {
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling checkoutsCouponsByCheckoutIdPost'
            );
        }
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling checkoutsCouponsByCheckoutIdPost'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling checkoutsCouponsByCheckoutIdPost'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling checkoutsCouponsByCheckoutIdPost'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/coupons';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createAnOrder
     *
     * Create an Order
     *
     * @param  string $accept accept (required)
     * @param  string $content_type content_type (required)
     * @param  string $checkout_id Id of the Checkout (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BigCommerce\Api\V3\Model\Checkout\Order1
     */
    public function createAnOrder($accept, $content_type, $checkout_id)
    {
        list($response) = $this->createAnOrderWithHttpInfo($accept, $content_type, $checkout_id);
        return $response;
    }

    /**
     * Operation createAnOrderWithHttpInfo
     *
     * Create an Order
     *
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $checkout_id Id of the Checkout (required)
     *
     * @throws \BigCommerce\Api\V3\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BigCommerce\Api\V3\Model\Checkout\Order1, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAnOrderWithHttpInfo($accept, $content_type, $checkout_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Order1';
        $request = $this->createAnOrderRequest($accept, $content_type, $checkout_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BigCommerce\Api\V3\Model\Checkout\Order1',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAnOrderAsync
     *
     * Create an Order
     *
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $checkout_id Id of the Checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAnOrderAsync($accept, $content_type, $checkout_id)
    {
        return $this->createAnOrderAsyncWithHttpInfo($accept, $content_type, $checkout_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAnOrderAsyncWithHttpInfo
     *
     * Create an Order
     *
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $checkout_id Id of the Checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAnOrderAsyncWithHttpInfo($accept, $content_type, $checkout_id)
    {
        $returnType = '\BigCommerce\Api\V3\Model\Checkout\Order1';
        $request = $this->createAnOrderRequest($accept, $content_type, $checkout_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAnOrder'
     *
     * @param  string $accept (required)
     * @param  string $content_type (required)
     * @param  string $checkout_id Id of the Checkout (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createAnOrderRequest($accept, $content_type, $checkout_id)
    {
        // verify the required parameter 'accept' is set
        if ($accept === null || (is_array($accept) && count($accept) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept when calling createAnOrder'
            );
        }
        // verify the required parameter 'content_type' is set
        if ($content_type === null || (is_array($content_type) && count($content_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $content_type when calling createAnOrder'
            );
        }
        // verify the required parameter 'checkout_id' is set
        if ($checkout_id === null || (is_array($checkout_id) && count($checkout_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $checkout_id when calling createAnOrder'
            );
        }

        $resourcePath = '/checkouts/{checkoutId}/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($accept !== null) {
            $headerParams['Accept'] = ObjectSerializer::toHeaderValue($accept);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = ObjectSerializer::toHeaderValue($content_type);
        }

        // path params
        if ($checkout_id !== null) {
            $resourcePath = str_replace(
                '{' . 'checkoutId' . '}',
                ObjectSerializer::toPathValue($checkout_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('{X-Auth-Client}');
        if ($apiKey !== null) {
            $headers['{X-Auth-Client}'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('{X-Auth-Token}');
        if ($apiKey !== null) {
            $headers['{X-Auth-Token}'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
