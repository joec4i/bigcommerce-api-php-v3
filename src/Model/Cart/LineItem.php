<?php
/**
 * LineItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  BigCommerce\Api\V3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Server to Server Cart API
 *
 * ### Cart Allows for a cart to be created using BigCommerce cart logic. The existing BigCommerce front end cart can be bypassed.  Notes: - cartId is the same as the checkoutId. - Carts are valid for 30 days from the last modification. This can include creating the cart or editing the cart. - Redirect URLs can be generated only from carts created using the server-to-server cart API. To restore a cart that was created on the storefront–either by a shopper or the Storefront Cart API–first recreate the cart using the server-to-server Cart API.
 *
 * OpenAPI spec version: 
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.7
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace BigCommerce\Api\V3\Model\Cart;

use \ArrayAccess;
use \BigCommerce\Api\V3\ObjectSerializer;

/**
 * LineItem Class Doc Comment
 *
 * @category Class
 * @package  BigCommerce\Api\V3
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LineItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Line Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'physical_items' => 'object[]',
        'digital_items' => 'object[]',
        'gift_certificates' => '\BigCommerce\Api\V3\Model\Cart\ItemGiftCertificate[]',
        'virtual_items' => '\BigCommerce\Api\V3\Model\Cart\ItemCustom[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'physical_items' => null,
        'digital_items' => null,
        'gift_certificates' => null,
        'virtual_items' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'physical_items' => 'physical_items',
        'digital_items' => 'digital_items',
        'gift_certificates' => 'gift_certificates',
        'virtual_items' => 'virtual_items'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'physical_items' => 'setPhysicalItems',
        'digital_items' => 'setDigitalItems',
        'gift_certificates' => 'setGiftCertificates',
        'virtual_items' => 'setVirtualItems'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'physical_items' => 'getPhysicalItems',
        'digital_items' => 'getDigitalItems',
        'gift_certificates' => 'getGiftCertificates',
        'virtual_items' => 'getVirtualItems'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['physical_items'] = isset($data['physical_items']) ? $data['physical_items'] : null;
        $this->container['digital_items'] = isset($data['digital_items']) ? $data['digital_items'] : null;
        $this->container['gift_certificates'] = isset($data['gift_certificates']) ? $data['gift_certificates'] : null;
        $this->container['virtual_items'] = isset($data['virtual_items']) ? $data['virtual_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['physical_items'] === null) {
            $invalidProperties[] = "'physical_items' can't be null";
        }
        if ($this->container['digital_items'] === null) {
            $invalidProperties[] = "'digital_items' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets physical_items
     *
     * @return object[]
     */
    public function getPhysicalItems()
    {
        return $this->container['physical_items'];
    }

    /**
     * Sets physical_items
     *
     * @param object[] $physical_items physical_items
     *
     * @return $this
     */
    public function setPhysicalItems($physical_items)
    {
        $this->container['physical_items'] = $physical_items;

        return $this;
    }

    /**
     * Gets digital_items
     *
     * @return object[]
     */
    public function getDigitalItems()
    {
        return $this->container['digital_items'];
    }

    /**
     * Sets digital_items
     *
     * @param object[] $digital_items digital_items
     *
     * @return $this
     */
    public function setDigitalItems($digital_items)
    {
        $this->container['digital_items'] = $digital_items;

        return $this;
    }

    /**
     * Gets gift_certificates
     *
     * @return \BigCommerce\Api\V3\Model\Cart\ItemGiftCertificate[]
     */
    public function getGiftCertificates()
    {
        return $this->container['gift_certificates'];
    }

    /**
     * Sets gift_certificates
     *
     * @param \BigCommerce\Api\V3\Model\Cart\ItemGiftCertificate[] $gift_certificates gift_certificates
     *
     * @return $this
     */
    public function setGiftCertificates($gift_certificates)
    {
        $this->container['gift_certificates'] = $gift_certificates;

        return $this;
    }

    /**
     * Gets virtual_items
     *
     * @return \BigCommerce\Api\V3\Model\Cart\ItemCustom[]
     */
    public function getVirtualItems()
    {
        return $this->container['virtual_items'];
    }

    /**
     * Sets virtual_items
     *
     * @param \BigCommerce\Api\V3\Model\Cart\ItemCustom[] $virtual_items virtual_items
     *
     * @return $this
     */
    public function setVirtualItems($virtual_items)
    {
        $this->container['virtual_items'] = $virtual_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


